apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      env: {{ .Values.env }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        env: {{ .Values.env }}
    spec:
      volumes:
      - name: google-cloud-key
        secret:
          secretName: google-application-credentials
      containers:
        - name: {{ .Chart.Name }}
          {{- if eq .Values.image.tag "latest"}}
          image: "{{ .Values.image.name }}/{{ .Chart.Name }}:{{ .Chart.AppVersion }}"
          {{- else}}
          image: "{{ .Values.image.devRepo }}/{{ .Chart.Name }}:{{ .Values.image.tag }}"
          {{- end}}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: google-cloud-key
            mountPath: /var/secrets/google
          env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/secrets/google/credentials.json
          - name: GOOGLE_CLOUD_PROJECT
            value: {{ .Values.gcp.project }}
          - name: DB_HOST
            {{- if .Values.database.managedPostgres }}
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-host
            {{- else if .Values.database.sqlProxyEnabled }}
            value: "localhost"
            {{- else }}
            value: $(POSTGRES_SERVICE_HOST)
            {{- end }}
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-port
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: db-config
                key: {{ .Values.database.secrets.nameKey }}
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: db-credentials
                key: {{ .Values.database.secrets.usernameKey }}
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db-credentials
                key: {{ .Values.database.secrets.passwordKey }}
          - name: DB_SCHEMA
<<<<<<< HEAD
<<<<<<< HEAD
            value: {{ .Values.database.schema }}
          - name: LOG_LEVEL
            value: {{ .Values.logLevel }}
=======
            value: {{ .Values.database.schema }}
>>>>>>> Changes based on testing
=======
            value: {{ .Values.database.schema }}
          - name: LOG_LEVEL
            value: {{ .Values.logLevel }}
>>>>>>> Use Census' logging config and refactor into directories
